<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LSC&#39;s_blog</title>
  <icon>https://www.gravatar.com/avatar/6ce441aa581c6e281c623968a3e3f1d5</icon>
  <subtitle>纯纯的夏季、、纯纯的我们、、那时笑的得多甜~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lsc123.github.io/"/>
  <updated>2019-03-25T13:51:48.207Z</updated>
  <id>https://lsc123.github.io/</id>
  
  <author>
    <name>半盏清酒</name>
    <email>1726947341@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>嵌入式Linux开发笔记 &lt;三&gt;  Linux进程</title>
    <link href="https://lsc123.github.io/2019/03/24/Linux-3/"/>
    <id>https://lsc123.github.io/2019/03/24/Linux-3/</id>
    <published>2019-03-24T13:05:23.000Z</published>
    <updated>2019-03-25T13:51:48.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-进程相关概念"><a href="#1-进程相关概念" class="headerlink" title="1. 进程相关概念"></a>1. 进程相关概念</h2><a id="more"></a><h3 id="1-1程序和进程"><a href="#1-1程序和进程" class="headerlink" title="1.1程序和进程"></a>1.1程序和进程</h3><ul><li>程序： 二进制文件，占用的磁盘空间</li><li>进程： 启动的程序<ul><li>所有的数据都在内存中</li><li>需要占用更多的系统资源（cpu,物理内存），分成若干个时间碎片，给进程处理</li></ul></li></ul><h3 id="1-2并行和并发"><a href="#1-2并行和并发" class="headerlink" title="1.2并行和并发"></a>1.2并行和并发</h3><ul><li>并发：并发并不是一个时间点，而是一个时间段内的概念</li><li>并行：并行是指两个或者多个事件在同一时刻发生</li></ul><h3 id="1-3进程控制块-PCB"><a href="#1-3进程控制块-PCB" class="headerlink" title="1.3进程控制块(PCB)"></a>1.3进程控制块(PCB)</h3><p>　　每一个进程在内核里都有一个进程控制块来维护进程相关的信息。Linux内核的进程控制块是task_struct结构体，在/usr/src/linux-header-3.16/include/linux/sched.h文件里可以查看struct　task_struct结构体的定义，其内部成员有很多，重点掌握以下内容</p><ul><li>进程ID：<br>  　　系统中每个进程都有唯一的ID，在C语言中用pid_t类型表示，其实就是一个非负整数。pid_t是用typedef对某个数据类型做了重定义，后面的_t是就是typedef的意思</li><li>进程的状态：<ul><li>有就绪，允许，运行，挂起，停止等状态</li></ul></li><li>进程切换时需要保存和恢复的一些CPU寄存器</li><li>描述虚拟地址空间的信息<pre><code>  　　在Linux下，每启动一个虚拟进程就对应一个虚拟地址空间，包含应用程序的所有信息，但是里面数据的实际计算是在物理内存里（cpu里的MMU会做一个虚拟内存到物理内存之间的映射）</code></pre></li><li>描述控制终端的信息<pre><code>  　　./a.out执行起来就变成一个进程，进程在运行时，依赖于终端，因为需要把数据输出到对应的终端上，所以进程会保存一些控制终端的信息</code></pre></li><li>当前工作目录（Current Working Directory）<br>  当前进程是在哪个工作目录下工作的<pre class="line-numbers language-bash"><code class="language-bash">  <span class="token function">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  在Linux下执行pwd,输出当前工作目录，是因为当前工作目录保存在地址空间中</li><li>umask掩码<br>  在每一个进程下都有umask掩码<pre class="line-numbers language-bash"><code class="language-bash">  <span class="token function">umask</span>  <span class="token function">umask</span> 222  <span class="token function">umask</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>  　　使用umask命令查看掩码，使用umask 222 改变进程掩码，在使用umask查看掩码，发现掩码改变为我们过设定的值。当再开启一个进程时，掩码为此进程下的掩码，与刚开始的进程下的修改的掩码不同，每一个进程之间是互不影响的</li><li>文件描述符表，包含很多指向file结构体的指针<br>   　　文件描述符表在pcb里，其实可以看成一个大小为1024数组，对于任何一个进程来说，默认能打开的最多文件个数为1024个，把内核改一下，重新编译一下内核，就可以改变能打开的最多文件个数，不过不建议轻易改动内核，除非特殊需要</li><li>和信号相关的信息<br>   Linux下独有的</li><li>用户ID和组ID<pre class="line-numbers language-bash"><code class="language-bash">  <span class="token function">stat</span> test.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  输入stat加文件名，查看文件状态uid和Gid后的就是用户ID和组ID</li><li>会话（Session）和进程组<br>   多个进程放在一起就是一个进程组，多个进程组组成的就是会话</li><li>进程可以使用的资源上限（Resource Limit）    <pre class="line-numbers language-bash"><code class="language-bash">  <span class="token function">ulimit</span> -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  　　输入 ulimit -a命令，可以看到进程里的资源，例如默认能打开的文件个数，管道里的缓存区，栈的默认缓存区大小，都在资源上限里看到，这些数据都是存在进程控制块里，</li></ul><h3 id="1-4进程的五种状态"><a href="#1-4进程的五种状态" class="headerlink" title="1.4进程的五种状态"></a>1.4进程的五种状态</h3><ul><li>就绪态<br>  　　　在终端下执行./a.out后，进程有了，它所对应的地址空间也有了，所处的状态为就绪态，有执行资格，没有执行权，多个进程分用cpu的时间碎片，在没有分到时间碎片时，处于就绪态</li><li>运行态<br>  当抢到时间碎片后，处于运行态，所有的运行态都是从就绪态而来</li><li>挂起态<br>  没有执行资格，没有执行权（例如运行sleep()函数后）</li></ul><p><img src="LSC123.github.io/my_picture/Linux_picture/jincheng.png" alt="进程的五种状态"></p><h2 id="2-进程控制"><a href="#2-进程控制" class="headerlink" title="2. 进程控制"></a>2. 进程控制</h2><pre><code>进程控制是讲如何创建子进程</code></pre><h3 id="2-1fork函数"><a href="#2-1fork函数" class="headerlink" title="2.1fork函数"></a>2.1fork函数</h3><p><img src="LSC123.github.io/my_picture/Linux_picture/fork.png" alt="fork函数解析"></p><p>　　fork函数创建子进程，子进程相当于父进程的拷贝，用户区数据一样，进程ID不同<br>后续对父进程或子进程用户区数据做操作，互不影响，相互独立<br>　　父进程与子进程的数据在内存区读时共享，写时复制（当就修改的情况下），并且父子进程之间不能够使用全局变量进行通信，因为两个进程之间的内存不能共享</p><ul><li>fork函数有两个返回值<ul><li>父进程返回子进程的PID</li><li>子进程返回0</li></ul></li><li>getpid函数<br>  得到当前进程的PID</li><li>getppid函数<br>  得到当前进程的父进程的PID </li></ul><h4 id="2-1-1父子进程运行先后顺序不一定"><a href="#2-1-1父子进程运行先后顺序不一定" class="headerlink" title="2.1.1父子进程运行先后顺序不一定"></a>2.1.1父子进程运行先后顺序不一定</h4><p><em>通过让父进程sleep(1)来让子进程先运行</em></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#include &lt;unistd.h></span><span class="token comment" spellcheck="true">#include &lt;stdlib.h></span><span class="token comment" spellcheck="true">#include &lt;sys/types.h></span><span class="token comment" spellcheck="true">#include &lt;sys/stat.h></span><span class="token comment" spellcheck="true">#include &lt;string.h></span>int main<span class="token punctuation">(</span>int argc, const char* argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pid_t pid <span class="token operator">=</span> fork<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int i<span class="token operator">=</span>0<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>4<span class="token punctuation">;</span> ++i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        printf<span class="token punctuation">(</span><span class="token string">" i = %d\n"</span>, i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    // 父进程    if<span class="token punctuation">(</span>pid <span class="token operator">></span> 0<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        printf<span class="token punctuation">(</span><span class="token string">"parent process, pid = %d, ppid = %d\n"</span>, getpid<span class="token punctuation">(</span><span class="token punctuation">)</span>, getppid<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        //sleep<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    // 子进程    <span class="token keyword">else</span> if<span class="token punctuation">(</span>pid <span class="token operator">==</span> 0<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        printf<span class="token punctuation">(</span><span class="token string">"child process, pid = %d, ppid = %d\n"</span>, getpid<span class="token punctuation">(</span><span class="token punctuation">)</span>, getppid<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    for<span class="token punctuation">(</span>int i<span class="token operator">=</span>0<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>4<span class="token punctuation">;</span> ++i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        printf<span class="token punctuation">(</span><span class="token string">" i = %d\n"</span>, i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　　sleep(1)的作用是让父进程停止一秒，让子进程运行，防止父进程先运行结束，在终端打印时，父进程先运行完后，终端判断从后台运行到前台，此时子进程还未运行结束会出现下面这种输出情况</p><pre class="line-numbers language-bash"><code class="language-bash">执行./a.outi<span class="token operator">=</span>0i<span class="token operator">=</span>1i<span class="token operator">=</span>2i<span class="token operator">=</span>3parent process, ppid <span class="token operator">=</span> 37157lsc@lsc123:~/test $ child process, pid <span class="token operator">=</span>37258 , ppid <span class="token operator">=</span> 37157i<span class="token operator">=</span>0i<span class="token operator">=</span>1i<span class="token operator">=</span>2i<span class="token operator">=</span>3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确输出为</p><pre class="line-numbers language-bash"><code class="language-bash">执行./a.outi<span class="token operator">=</span>0i<span class="token operator">=</span>1i<span class="token operator">=</span>2i<span class="token operator">=</span>3parent process, ppid <span class="token operator">=</span> 37157child process, pid <span class="token operator">=</span>37258 , ppid <span class="token operator">=</span> 37157i<span class="token operator">=</span>0i<span class="token operator">=</span>1i<span class="token operator">=</span>2i<span class="token operator">=</span>3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2验证父子进程间是否共享全局变量"><a href="#2-1-2验证父子进程间是否共享全局变量" class="headerlink" title="2.1.2验证父子进程间是否共享全局变量"></a>2.1.2验证父子进程间是否共享全局变量</h4><h3 id="2-2在终端下查看某个正在运行的进程"><a href="#2-2在终端下查看某个正在运行的进程" class="headerlink" title="2.2在终端下查看某个正在运行的进程"></a>2.2在终端下查看某个正在运行的进程</h3><ul><li><p>查看进程</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> au<span class="token function">ps</span> aux<span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> myhello <span class="token punctuation">(</span>查看指定进程,经常使用<span class="token punctuation">)</span><span class="token function">ps</span> ajx<span class="token function">ps</span> ajx <span class="token operator">|</span> <span class="token function">grep</span> myhello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps ajx 命令查看进程，输出PPID是父进程，PID是子进程，PGID是进程组，SID是会话ID</p></li><li><p>杀死进程<br>kill 向指定的进程发送信号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> -l （查看LINUX操作系统下的64个信号）<span class="token function">kill</span> -9  38078 <span class="token punctuation">(</span>无条件杀死一个进程（PID是38078）,9相当于LINUX操作系统下<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入kill -9  38078命令是无条件杀死一个进程。<br>38078是PID,9相当于LINUX操作系统下的第9个信号SIGKILL</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-进程相关概念&quot;&gt;&lt;a href=&quot;#1-进程相关概念&quot; class=&quot;headerlink&quot; title=&quot;1. 进程相关概念&quot;&gt;&lt;/a&gt;1. 进程相关概念&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://lsc123.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lsc123.github.io/2019/03/22/hello-world/"/>
    <id>https://lsc123.github.io/2019/03/22/hello-world/</id>
    <published>2019-03-22T06:07:51.315Z</published>
    <updated>2019-03-25T02:54:10.928Z</updated>
    
    <content type="html"><![CDATA[<p>１.由于markdown语法主要考虑的是英文，所以对于中文的首行缩进并不太友好</p><ul><li>把输入法由半角改为全角。 两次空格之后就能够有两个汉字的缩进。</li></ul><p>２.文章置顶<br>&amp;ensp打开文章添加top字段,设置数值，数值越大文章越靠前</p><p>3.首行缩进<br>&ensp; //相当于1个中文，2字节</p><p>4.换行<br>双空格加回车可实现 hexo文章中的换行功能（在上文代码块中亦适用）</p><p>5.文章折叠<br>在要显示的文字末尾添加如下代码实现文章在主页的折叠显示。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token function">more</span> --<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"stdio.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello Linux模拟windows（SAMBA服务），与windows通讯\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;１.由于markdown语法主要考虑的是英文，所以对于中文的首行缩进并不太友好&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把输入法由半角改为全角。 两次空格之后就能够有两个汉字的缩进。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;２.文章置顶&lt;br&gt;&amp;amp;ensp打开文章添加top字段,设置数值，数值越大文章越靠前&lt;/p&gt;
&lt;p&gt;3.首行缩进&lt;br&gt;&amp;ensp; //相当于1个中文，2字节&lt;/p&gt;
&lt;p&gt;4.换行&lt;br&gt;双空格加回车可实现 hexo文章中的换行功能（在上文代码块中亦适用）&lt;/p&gt;
&lt;p&gt;5.文章折叠&lt;br&gt;在要显示的文字末尾添加如下代码实现文章在主页的折叠显示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&amp;lt;!-- more --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>嵌入式Linux开发笔记 &lt;一&gt;  Linux环境搭建</title>
    <link href="https://lsc123.github.io/2019/03/19/post-title/"/>
    <id>https://lsc123.github.io/2019/03/19/post-title/</id>
    <published>2019-03-18T16:09:20.000Z</published>
    <updated>2019-03-24T15:28:58.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lt-一-gt-Linux环境搭建"><a href="#lt-一-gt-Linux环境搭建" class="headerlink" title="&lt;一&gt;  Linux环境搭建"></a><strong>&lt;一&gt;  Linux环境搭建</strong></h1><a id="more"></a><h2 id="1-安装VMware-Workstation虚拟机"><a href="#1-安装VMware-Workstation虚拟机" class="headerlink" title="1.安装VMware Workstation虚拟机"></a>1.安装VMware Workstation虚拟机</h2><p>挂载：<br>    它指将一个设备（通常是存储设备）挂接到一个已存在的目录上（这个目录可以不为空，但挂载后这个目录下以前的内容将不可用）我们要访问存储设备中的文件，必须将文件所在的分区挂载到一个已存在的目录上，然后通过访问这个目录来访问存储设备。</p><h2 id="2-安装ubuntu及相关服务"><a href="#2-安装ubuntu及相关服务" class="headerlink" title="2.安装ubuntu及相关服务"></a>2.安装ubuntu及相关服务</h2><h3 id="2-1-安装编辑器VIM"><a href="#2-1-安装编辑器VIM" class="headerlink" title="2.1 安装编辑器VIM"></a>2.1 安装编辑器VIM</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-SSHD服务"><a href="#2-2-SSHD服务" class="headerlink" title="2.2 SSHD服务"></a>2.2 SSHD服务</h3><p>  ssh：Secure shell<br>  分为客户端和服务端<br><strong>(1)安装SecureCRT客户端</strong><br>远程登录服务器<br><strong>(2)zmodem协议</strong><br>rz 命令(上传)<br>以zmodem协议receive<br>sz 命令（下载）<br>以zmodem协议send</p><p>rz命令以后出现选择文件框选择完以后<br>输入rz命令可以查看文件<br>输入ls命令可以查看根目录<br>输入cat+文件名命令可以查看文件内容</p><p>上传下载例子：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> mytest.txt（创建文件）//输入编辑内容:wq（保存退出）ls（查看目录）sz mytest.txt <span class="token punctuation">(</span>下载文件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3samba服务器"><a href="#2-3samba服务器" class="headerlink" title="2.3samba服务器"></a>2.3samba服务器</h3><p>简介：<br>SMB 协议：Server Message Block（服务消息块）<br>Linux模拟windows（SAMBA服务），与windows通讯</p><h4 id="1-安装samba服务器"><a href="#1-安装samba服务器" class="headerlink" title="1.安装samba服务器"></a>1.安装samba服务器</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> samba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-samba服务器的配置"><a href="#2-samba服务器的配置" class="headerlink" title="2.samba服务器的配置"></a>2.samba服务器的配置</h4><p>（1）/etc/samba/smb.conf<br>    samba的用户权限：<br>    smbpasswd   （命令）<br>    Linux 登录用户<br>    Samba登录用户（用户名共享，密码不共享）<br>    配置需要共享哪个目录，以及这个目录的访问权限</p><p>（2）配置samba访问权限及samba登录密码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/samba  （进入Samba文件夹）<span class="token function">ls</span><span class="token function">cp</span> smb.conf bak_smb.conf（复制文件）<span class="token function">ls</span><span class="token function">sudo</span> <span class="token function">vi</span>  smb.conf（查看文件）         按i进入编辑模式          <span class="token punctuation">[</span>lsc_share<span class="token punctuation">]</span>                 comment<span class="token operator">=</span>My share （标题）                  path<span class="token operator">=</span>/home/lsc/lab （共享目录）                  writable<span class="token operator">=</span>yes             （是否可写）                  browseable<span class="token operator">=</span>yes       （是否可以浏览）                  public<span class="token operator">=</span>yes                  guest ok<span class="token operator">=</span>yes            （客户是否连接）         按ESC退出编辑模式         :wq  （保存退出命令）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）/——-以下命令在  /etc/samba$  下进行—————-/ </p><pre class="line-numbers language-bash"><code class="language-bash">    -a（只能增加一个现有用户）    <span class="token function">sudo</span> smbpasswd -a  lsc    New SMB password: 123    Retype new SMB password: 123    <span class="token function">sudo</span> /etc/init.d/smbd restart（重启）    <span class="token function">sudo</span> /etc/init.d/nmbd restart（重启）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-windows客户端的访问方式"><a href="#3-windows客户端的访问方式" class="headerlink" title="3.windows客户端的访问方式"></a>3.windows客户端的访问方式</h2><h3 id="3-1在windows下创建虚拟共享目录："><a href="#3-1在windows下创建虚拟共享目录：" class="headerlink" title="3.1在windows下创建虚拟共享目录："></a>3.1在windows下创建虚拟共享目录：</h3><p>1.在Linux终端输入</p><pre class="line-numbers language-bash"><code class="language-bash"> ifconfig（查看IP地址）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.windows下输入运行<br>3.在 运行中输入  \IP地址<br>（初始状态下弹出输入用户名和密码。为上面所设置的内容）<br>4.查看共享目录<br>发现没有（在Linux下输入以下命令）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span>  /home/lsc/<span class="token function">ls</span><span class="token function">mkdir</span> lab （创建目录）<span class="token function">cd</span> lab/<span class="token function">ls</span><span class="token function">vi</span>  123.txt//编辑内容（内容随意，用于测试）：wq（保存退出）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.再去看共享目录，发现有123.txt文件</p><h3 id="3-2映射网络驱动器（盘符）："><a href="#3-2映射网络驱动器（盘符）：" class="headerlink" title="3.2映射网络驱动器（盘符）："></a>3.2映射网络驱动器（盘符）：</h3><p> （相当于将Linux的共享盘当做U盘放在Windows当中的映射服务）</p><ol><li>选择盘符（默认）</li><li><em>\192.168.220.129\lsc_share</em>(lsc_share为前面创建的分享目录)<br>(地址通过ifcofig命令查看，共享文件为所创建的方括号内的名字)</li><li>建立一个文件（.txt），用于测试</li><li>在linux下输入<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ./lab<span class="token function">ls</span><span class="token function">cat</span> abc.txt <span class="token punctuation">(</span>查看文件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="4-vmtools的安装"><a href="#4-vmtools的安装" class="headerlink" title="4.vmtools的安装"></a>4.vmtools的安装</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">su</span>     （进入root用户）<span class="token function">mkdir</span> /mnt/cdrom    <span class="token punctuation">(</span>在mnt目录下创建cdrom文件夹，用于下一步使用<span class="token punctuation">)</span><span class="token function">mount</span>  /dev/cdrom  /mnt/cdrom    （将光驱上的文件挂载在我们新建的文件夹里面）<span class="token function">cd</span>  /mnt/cdrom（将操作目录切换到mnt目录下的cdrom文件夹里面）<span class="token function">ls</span> <span class="token punctuation">(</span>查看后我们可以看到，VMware Tools工具被成功的放在了新建的文件夹下<span class="token punctuation">)</span><span class="token function">cp</span> VMwareTools-10.1.15-6627299.tar.gz /tmp（将VMwareTools压缩包复制到tmp目录下）<span class="token function">cd</span> /tmp（将操作目录切换到tmp目录下）<span class="token function">tar</span> -zxvf VMwareTools-10.1.15-6627299.tar.gz（将VMwareTools压缩包解压）<span class="token function">sudo</span> vmware-tools-distrib/vmware-install.pl      进行VMwareTools工具的安装。（注意安装的时候，不管出现什么，全部按enter键就行了）    完成安装后，我们重新启动我们的linux虚拟机，我们就会看到我们的共享文件夹了<span class="token function">cd</span> /mnt<span class="token function">ls</span><span class="token function">cd</span> hgfs/14. 点击设置里的选项中的共享文件夹15.选择总是启用16. 从Windows里选择一个文件夹，此文件夹相当于一个U盘一样存储Linux所建立的文件实现交互<span class="token function">ls</span> <span class="token punctuation">(</span>查看我们所建立的文件夹<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> tar命令扩展：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf VMwareTools-10.1.15-6627299.tar.gz -C /tmp/（将文件解压到tmp目录下）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-SourceInsight安装"><a href="#5-SourceInsight安装" class="headerlink" title="5.SourceInsight安装"></a>5.SourceInsight安装</h2><p>代码编译器利器</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lt-一-gt-Linux环境搭建&quot;&gt;&lt;a href=&quot;#lt-一-gt-Linux环境搭建&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;一&amp;gt;  Linux环境搭建&quot;&gt;&lt;/a&gt;&lt;strong&gt;&amp;lt;一&amp;gt;  Linux环境搭建&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://lsc123.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
